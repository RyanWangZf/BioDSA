{
  "prog": {
    "lm": null,
    "traces": [],
    "train": [],
    "demos": [
      {
        "augmented": true,
        "test_case": "assert mutation_indicator[\"PATIENT_ID\"].nunique() == 130\nassert mutation_indicator[\"Hugo_Symbol\"].nunique() == 95\nassert mutation_indicator[\"Silent\"].sum() == 159\nassert mutation_indicator[\"Missense\"].sum() == 624\nassert mutation_indicator[\"Splice site\"].sum() == 57\nassert mutation_indicator[\"Nonsense\"].sum() == 119\nassert mutation_indicator[\"Frame shift\"].sum() == 0\nassert mutation_indicator[\"In frame indel\"].sum() == 0",
        "reference_answer": "\nimport pandas as pd\n\n# Load the data\ndata_mutations = pd.read_csv(\"\/workdir\/data_mutations.csv\")\n\ndata_mutations = data_mutations[data_mutations[\"Hugo_Symbol\"].isin(significant_genes)].reset_index(drop=True)\n\n# Define the mutation types of interest\nmutation_types = {\n    'Silent': 'Silent',\n    'Missense': 'Missense_Mutation',\n    'Splice site': 'Splice_Site',\n    'Nonsense': 'Nonsense_Mutation',\n    'Frame shift': 'Frame_Shift',\n    'In frame indel': 'In_Frame_Indel'\n}\n\n# Initialize the mutation indicator dataframe\nmutation_indicator = pd.DataFrame(columns=[\"PATIENT_ID\", \"Hugo_Symbol\"] + list(mutation_types.keys()))\n\n# Populate the mutation indicator dataframe\nfor patient_id, group in data_mutations.groupby(\"Tumor_Sample_Barcode\"):\n    for gene, gene_group in group.groupby(\"Hugo_Symbol\"):\n        row = {\"PATIENT_ID\": patient_id, \"Hugo_Symbol\": gene}\n        for mutation_type, classification in mutation_types.items():\n            row[mutation_type] = int(any(gene_group[\"Variant_Classification\"] == classification))\n        mutation_indicator = mutation_indicator._append(row, ignore_index=True)\n\n# Save the mutation indicator dataframe to a CSV file\nmutation_indicator.to_csv(\"mutation_indicator.csv\", index=False)\n\n# Display the first few rows of the mutation indicator dataframe\nprint(mutation_indicator.head())",
        "temperature": 0.7,
        "question": "For each patient and each gene, create a mutation indicator dataframe that includes the types of mutations: Silent, Missense, Splice site, Nonsense, Frame shift, and In frame indel. The output dataframe should be saved as `mutation_indicator` with the following columns: - PATIENT_ID - Hugo_Symbol - Silent - Missense - Splice site - Nonsense - Frame shift - In frame indel"
      },
      {
        "question": "Get International Prognostic Index score (IPI) scores for each patient, classify the patient into groups of: low risk, intermediate risk, and high risk. Drop the patients with unknown scores. The results are saved as a pd.DataFrame named `IPI_RISK` with two columns:\n- PATIENT_ID\n- Risk Group",
        "test_case": "assert IPI_RISK.shape == (761, 2)\n\nassert IPI_RISK[\"Risk Group\"].nunique() == 3",
        "reference_answer": "import pandas as pd\n\n# Load the data\ndata_clinical_patient = pd.read_csv(\"\/workdir\/data_clinical_patient.csv\")\n\n# Drop patients with unknown IPI scores\ndata_clinical_patient = data_clinical_patient.dropna(subset=['IPI'])\n\n# Classify patients into risk groups based on IPI scores\ndef classify_risk_group(ipi_score):\n    if ipi_score <= 1:\n        return 'Low Risk'\n    elif ipi_score <= 3:\n        return 'Intermediate Risk'\n    else:\n        return 'High Risk'\n\ndata_clinical_patient['Risk Group'] = data_clinical_patient['IPI'].apply(classify_risk_group)\n\n# Create the IPI_RISK DataFrame\nIPI_RISK = data_clinical_patient[['PATIENT_ID', 'Risk Group']]\n\n# Save the results to a CSV file\nIPI_RISK.to_csv(\"IPI_RISK.csv\", index=False)\n\n# Display the first few rows of the IPI_RISK DataFrame\nprint(IPI_RISK.head())\n"
      },
      {
        "question": "show the overall survival curves for patients across the IPI risk groups. save three cuves as variables: \"kmf_low\", \"kmf_middle\", and \"kmf_high\" respectively.",
        "test_case": "assert kmf_high.event_observed.sum() == 143\nassert kmf_low.event_observed.sum() == 243\nassert kmf_middle.event_observed.sum() == 370\nassert kmf_middle.median_survival_time_ == 89.376\nassert kmf_low.median_survival_time_ == 124.64\nassert kmf_high.median_survival_time_ == 54.72",
        "reference_answer": "import pandas as pd\nfrom lifelines import KaplanMeierFitter\nfrom lifelines.plotting import add_at_risk_counts\nimport matplotlib.pyplot as plt\n\n# Prepare the data\ndata = data_clinical_patient[[\"OS_MONTHS\", \"Risk Group\"]].dropna()\n\n# Initialize the plot\nax = plt.subplot(111)\n\n# Plot survival curves for each IPI risk group and save them as variables\nfor group in data[\"Risk Group\"].unique():\n    group_data = data[data[\"Risk Group\"] == group]\n    if group == \"Low Risk\":\n        kmf_low.fit(group_data[\"OS_MONTHS\"], label=f\"IPI {group}\")\n        kmf_low.plot_survival_function(ax=ax)\n    elif group == \"Intermediate Risk\":\n        kmf_middle.fit(group_data[\"OS_MONTHS\"], label=f\"IPI {group}\")\n        kmf_middle.plot_survival_function(ax=ax)\n    elif group == \"High Risk\":\n        kmf_high.fit(group_data[\"OS_MONTHS\"], label=f\"IPI {group}\")\n        kmf_high.plot_survival_function(ax=ax)\n\n# Add at risk counts\nadd_at_risk_counts(kmf, ax=ax)\n\n# Save the figure\nplt.savefig(\"survival_curves_ipi.png\")\nplt.show()\n"
      },
      {
        "question": "get the mutation indicators (# of mutation occurences) per patient per gene, for the top-10 frequent mutated genes, for truncating mutation and missense mutation, respectively.\n\nFor instance, the output dataframe is saved as `mutations` with columns:\n- PATIENT_ID\n- Hugo_Symbol\n- Truncating\n- Missense",
        "test_case": "assert mutations.columns.tolist() == ['PATIENT_ID', 'Hugo_Symbol', 'Truncating', 'Missense']\nassert mutations[\"PATIENT_ID\"].nunique() == 61\nassert mutations[\"Hugo_Symbol\"].nunique() == 10\nassert mutations[\"Truncating\"].astype(int).value_counts().to_dict() == {0.0: 508, 1.0: 66, 2.0: 16, 3.0: 6}\nassert mutations[\"Missense\"].value_counts().astype(int).to_dict() == {0.0: 474, 1.0: 112, 2.0: 8, 3.0: 2}",
        "reference_answer": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Load the data\ndata_clinical_patient = pd.read_csv(\"\/workdir\/data_clinical_patient.csv\")\ndata_clinical_sample = pd.read_csv(\"\/workdir\/data_clinical_sample.csv\")\ndata_cna = pd.read_csv(\"\/workdir\/data_cna.csv\")\ndata_mutations = pd.read_csv(\"\/workdir\/data_mutations.csv\")\n\n# Get the top-10 frequent mutated genes\ntop_genes = data_mutations['Hugo_Symbol'].value_counts().head(10).index.tolist()\n\n# Filter mutations for truncating and missense mutations\ntruncating_mutations = data_mutations[data_mutations['Variant_Classification'].str.contains('Frame_Shift|Nonsense|Splice_Site|Translation_Start_Site')]\nmissense_mutations = data_mutations[data_mutations['Variant_Classification'] == 'Missense_Mutation']\n\n# Get mutation indicators per patient for truncating mutations\ntruncating_mutations_top_genes = truncating_mutations[truncating_mutations['Hugo_Symbol'].isin(top_genes)]\ntruncating_mutations_per_patient = truncating_mutations_top_genes.groupby(['Hugo_Symbol', 'Tumor_Sample_Barcode']).size().unstack(fill_value=0)\ntruncating_mutations_per_patient = truncating_mutations_per_patient.T.reset_index().melt(id_vars=[\"Tumor_Sample_Barcode\"], var_name=\"Hugo_Symbol\", value_name=\"Truncating\")\n\n# Get mutation indicators per patient for missense mutations\nmissense_mutations_top_genes = missense_mutations[missense_mutations['Hugo_Symbol'].isin(top_genes)]\nmissense_mutations_per_patient = missense_mutations_top_genes.groupby(['Hugo_Symbol', 'Tumor_Sample_Barcode']).size().unstack(fill_value=0)\nmissense_mutations_per_patient = missense_mutations_per_patient.T.reset_index().melt(id_vars=[\"Tumor_Sample_Barcode\"], var_name=\"Hugo_Symbol\", value_name=\"Missense\")\n\nmutations = truncating_mutations_per_patient.merge(missense_mutations_per_patient, on=[\"Tumor_Sample_Barcode\",\"Hugo_Symbol\"], how=\"outer\").fillna(0)\nmutations = data_clinical_sample[[\"PATIENT_ID\",\"SAMPLE_ID\"]].merge(mutations.rename(columns={\"Tumor_Sample_Barcode\":\"SAMPLE_ID\"}), on=\"SAMPLE_ID\", how=\"left\")\nmutations = mutations.dropna(subset=[\"Hugo_Symbol\"])\nmutations = mutations.drop([\"SAMPLE_ID\"],axis=1).reset_index(drop=True)"
      },
      {
        "question": "Compare the overall survival curves of TP53 wild type cohort v.s. mutational type cohort. Save the curves as `kmf_wild` and `kmf_mut`, respectively.",
        "test_case": "assert kmf_wild.event_observed.sum() == 269\nassert kmf_mut.event_observed.sum() == 58\nassert abs(kmf_wild.durations.sum()-12896.780199342002) < 1e-8\nassert abs(kmf_mut.durations.sum()-1500.788522587) < 1e-8",
        "reference_answer": "\nimport pandas as pd\nfrom lifelines import KaplanMeierFitter\nimport matplotlib.pyplot as plt\n\n# Load the data\ndata_clinical_patient = pd.read_csv('\/workdir\/data_clinical_patient.csv')\ndata_mutations = pd.read_csv('\/workdir\/data_mutations.csv')\ndata_clinical_sample = pd.read_csv('\/workdir\/data_clinical_sample.csv')\n\n\n\n\n# Merge the clinical and mutation data\ndata_mutations = data_mutations.merge(data_clinical_sample, left_on=\"Tumor_Sample_Barcode\", right_on=\"SAMPLE_ID\")\nmerged_data = pd.merge(data_clinical_patient, data_mutations, left_on='PATIENT_ID', right_on='PATIENT_ID')\n\n# Create cohorts based on TP53 mutation status\nwild_type_cohort = merged_data[merged_data['Hugo_Symbol'] != 'TP53']\nwild_type_cohort = wild_type_cohort[['PATIENT_ID','OS_STATUS','OS_MONTHS']].drop_duplicates()\n\nmutational_type_cohort = merged_data[merged_data['Hugo_Symbol'] == 'TP53']\nmutational_type_cohort = mutational_type_cohort[['PATIENT_ID','OS_STATUS','OS_MONTHS']].drop_duplicates()\n\n# Fit the Kaplan-Meier estimator for both cohorts\nkmf_wild = KaplanMeierFitter()\nkmf_mut = KaplanMeierFitter()\n\n# Plot the survival curves\nfig, ax = plt.subplots()\n\nkmf_wild.fit(wild_type_cohort['OS_MONTHS'], event_observed=wild_type_cohort['OS_STATUS'] == '1:DECEASED', label='TP53 Wild Type')\nkmf_wild.plot_survival_function(ax=ax)\n\nkmf_mut.fit(mutational_type_cohort['OS_MONTHS'], event_observed=mutational_type_cohort['OS_STATUS'] == '1:DECEASED', label='TP53 Mutational')\nkmf_mut.plot_survival_function(ax=ax)\n\n# Add at risk counts\nfrom lifelines.plotting import add_at_risk_counts\nadd_at_risk_counts(kmf_wild, kmf_mut, ax=ax)\n\n# Save the plots\nplt.savefig('kmf_wild.png')\nplt.savefig('kmf_mut.png')\nplt.show()\n"
      },
      {
        "question": "Make the overall survival curves for people respond to PD-L1 and do not respond to PD-L1, for the survival after anti-PD-1 therapy. Save the curves as `kmf_res`, `kmf_non_res`, respectively.",
        "test_case": "assert kmf_res.event_observed.sum() == 8\nassert kmf_non_res.event_observed.sum() == 3\nassert abs(kmf_res.durations.sum()-202.1)<1e-8\nassert abs(kmf_non_res.durations.sum()-166.8) < 1e-8",
        "reference_answer": "\nimport pandas as pd\nfrom lifelines import KaplanMeierFitter\nfrom lifelines.plotting import add_at_risk_counts\nimport matplotlib.pyplot as plt\n\n# Load the data\ndata_clinical_patient = pd.read_csv(\"\/workdir\/data_clinical_patient.csv\")\n\ndata_clinical_patient[\"OS_FROM_PD1I_STATUS\"] = data_clinical_patient[\"OS_FROM_PD1I_STATUS\"].apply(lambda x: 1 if x == \"1:DECEASED\" else 0)\n# Filter data for responders and non-responders\nresponders = data_clinical_patient[data_clinical_patient['RESPONSE'] == 'Yes']\nnon_responders = data_clinical_patient[data_clinical_patient['RESPONSE'] == 'No']\n\n# Initialize the KaplanMeierFitter\nkmf_res = KaplanMeierFitter()\nkmf_non_res = KaplanMeierFitter()\n\n# Fit the data for responders\nkmf_res.fit(durations=responders['OS_FROM_PD1I_MONTHS'], event_observed=responders['OS_FROM_PD1I_STATUS'], label='Responders')\n# Fit the data for non-responders\nkmf_non_res.fit(durations=non_responders['OS_FROM_PD1I_MONTHS'], event_observed=non_responders['OS_FROM_PD1I_STATUS'], label='Non-Responders')\n\n# Plot the survival curves\nax = plt.subplot(111)\nkmf_res.plot_survival_function(ax=ax)\nkmf_non_res.plot_survival_function(ax=ax)\n\n# Add at risk counts\nadd_at_risk_counts(kmf_res, kmf_non_res, ax=ax)\n\n# Save the figures\nplt.savefig(\"kmf_res.png\")\nplt.savefig(\"kmf_non_res.png\")\n\n# Show the plot\nplt.show()\n"
      },
      {
        "question": "Make the progression-free survival curves for people receiving Nivolumab and Pembrolizumab, respectively. Save the curves as `kmf_niv` and `kmf_pem`, respectively.",
        "test_case": "assert kmf_niv.event_observed.sum() == 9\nassert kmf_pem.event_observed.sum() == 3",
        "reference_answer": "\nimport pandas as pd\nfrom lifelines import KaplanMeierFitter\nimport matplotlib.pyplot as plt\n\n\n# Load the data\ndata_clinical_patient = pd.read_csv(\"\/workdir\/data_clinical_patient.csv\")\n\n# Filter data for Nivolumab and Pembrolizumab\ndata_clinical_patient = data_clinical_patient.dropna(subset=[\"PFS_STATUS\",\"PFS_MONTHS\"])\ndata_clinical_patient[\"PFS_STATUS\"] = data_clinical_patient[\"PFS_STATUS\"].apply(lambda x: 1 if x == \"1:Yes\" else 0)\ndata_niv = data_clinical_patient[data_clinical_patient['PD1_INHIBITOR_DRUG'] == 'Nivolumab']\ndata_pem = data_clinical_patient[data_clinical_patient['PD1_INHIBITOR_DRUG'] == 'Pembrolizumab']\n\n# Initialize the KaplanMeierFitter\nkmf_niv = KaplanMeierFitter()\nkmf_pem = KaplanMeierFitter()\n\n# Fit the data\nkmf_niv.fit(durations=data_niv['OS_FROM_PD1I_MONTHS'], event_observed=data_niv['PFS_STATUS'], label='Nivolumab')\nkmf_pem.fit(durations=data_pem['OS_FROM_PD1I_MONTHS'], event_observed=data_pem['PFS_STATUS'], label='Pembrolizumab')\n\n# Plot the survival curves\nax = plt.subplot(111)\nkmf_niv.plot_survival_function(ax=ax)\nkmf_pem.plot_survival_function(ax=ax)\n\n# Add at risk counts\nfrom lifelines.plotting import add_at_risk_counts\nadd_at_risk_counts(kmf_niv, kmf_pem, ax=ax)\n\n# Save the plot\nplt.savefig(\"kmf_niv_pem.png\")\n"
      },
      {
        "question": "make the recurrence-free survival curve for two groups of patients: TTN wild-type and TTN mutation. Save the km curve object `lifelines.KaplanMeierFitter` in \"kmf_wide_type\" and \"kmf_mutation\", respectively. ",
        "test_case": "assert kmf_wild_type.median_survival_time_== 68.1\nassert kmf_mutation.median_survival_time_ == 68.1",
        "reference_answer": "\nimport pandas as pd\nfrom lifelines import KaplanMeierFitter\nfrom lifelines.plotting import add_at_risk_counts\nimport matplotlib.pyplot as plt\n\n# Load the data\ndata_clinical_patient = pd.read_csv(\"\/workdir\/data_clinical_patient.csv\")\ndata_clinical_sample = pd.read_csv(\"\/workdir\/data_clinical_sample.csv\")\ndata_mutations = pd.read_csv(\"\/workdir\/data_mutations.csv\")\n\n# Merge data to get the required information\nmerged_data = data_clinical_patient.merge(data_clinical_sample, on=\"PATIENT_ID\")\nmerged_data = merged_data.merge(data_mutations, left_on=\"PATIENT_ID\", right_on=\"Tumor_Sample_Barcode\")\n\nmerged_data = merged_data.dropna(subset=[\"EFS_STATUS\"])\nmerged_data[\"EFS_STATUS\"] = merged_data[\"EFS_STATUS\"].apply(lambda x: int(x.split(\":\")[0]))\n\n# Filter data for KMT2C wild-type and KMT2C mutation\nwild_type = merged_data[merged_data[\"Hugo_Symbol\"] != \"TTN\"]\nmutation = merged_data[merged_data[\"Hugo_Symbol\"] == \"TTN\"]\n\n# Prepare data for Kaplan-Meier fitting\nwild_type_data = wild_type[[\"EFS_STATUS\", \"EFS_MONTHS\", \"PATIENT_ID\"]].dropna().drop_duplicates(subset=[\"PATIENT_ID\"])\nmutation_data = mutation[[\"EFS_STATUS\", \"EFS_MONTHS\",\"PATIENT_ID\"]].dropna().drop_duplicates(subset=[\"PATIENT_ID\"])\n\n# Plot the survival curves\nax = plt.subplot(111)\nkmf_wild_type = KaplanMeierFitter()\nkmf_wild_type.fit(wild_type_data[\"EFS_MONTHS\"], wild_type_data[\"EFS_STATUS\"], label=\"TTN wild type\")\nkmf_wild_type.plot_survival_function(ax=ax)\n\nkmf_mutation = KaplanMeierFitter()\nkmf_mutation.fit(mutation_data[\"EFS_MONTHS\"], mutation_data[\"EFS_STATUS\"], label=\"TTN mutation\")\nkmf_mutation.plot_survival_function(ax=ax)\n\n# Add at risk counts\nadd_at_risk_counts(kmf_wild_type, kmf_mutation, ax=ax)\n\n# Save the figure\nplt.savefig(\"recurrence_free_survival_curve.png\")\nplt.show()\n"
      },
      {
        "question": "Make the waterfall plot of the maximum\nchange in tumour size by RECIST for all patients. Save the data as a pd.DataFrame named `data_recist` with two columns\n- PATIENT_ID\n- RECIST",
        "test_case": "assert abs(data_recist[\"RECIST\"].sum() + 535.2999999999998) < 1e-8",
        "reference_answer": "\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the data\ndata_clinical_patient = pd.read_csv(\"\/workdir\/data_clinical_patient.csv\")\n\n# Create the data_recist DataFrame\ndata_recist = data_clinical_patient[[\"PATIENT_ID\", \"PERCENT_CHANGE_BY_RECIST\"]].rename(columns={\"PERCENT_CHANGE_BY_RECIST\": \"RECIST\"})\n\n# Plot the waterfall plot\ndata_recist = data_recist.dropna().sort_values(by=\"RECIST\")\nplt.figure(figsize=(10, 6))\nplt.bar(data_recist[\"PATIENT_ID\"], data_recist[\"RECIST\"], color=(data_recist[\"RECIST\"] > 0).map({True: 'red', False: 'blue'}))\nplt.xlabel(\"Patient ID\")\nplt.ylabel(\"RECIST\")\nplt.title(\"Waterfall Plot of Maximum Change in Tumour Size by RECIST\")\nplt.xticks(rotation=90)\nplt.tight_layout()\n\n# Save the plot\nplt.savefig(\"waterfall_plot.png\")\nplt.show()\n"
      },
      {
        "question": "get the age of diagnosis, median and the range. Save the results as variables named: `age_median` and `age_range` respectively.",
        "test_case": "assert abs(age_median - 63.903186945) < 1e-8\nassert abs(age_range - 69.57343117) < 1e-8",
        "reference_answer": "\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the data\ndata_clinical_patient = pd.read_csv(\"\/workdir\/data_clinical_patient.csv\")\n\n# Calculate the median and range of the age of diagnosis\nage_median = data_clinical_patient['AGE'].median()\nage_range = data_clinical_patient['AGE'].max() - data_clinical_patient['AGE'].min()\n\n# Print the results\nprint(f\"Median Age of Diagnosis: {age_median}\")\nprint(f\"Range of Age of Diagnosis: {age_range}\")\n\n# Plot the age distribution\nplt.figure(figsize=(10, 6))\nplt.hist(data_clinical_patient['AGE'], bins=30, edgecolor='k', alpha=0.7)\nplt.title('Age of Diagnosis Distribution')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.grid(True)\nplt.savefig(\"age_of_diagnosis_distribution.png\")\nplt.show()"
      },
      {
        "question": "Calculate the ratio for the following types of substitution for each patient:\n- A>C\n- A>G\n- A>T\n- C>A\n- C>G\n- C>T\n- CC>TT\nand combine all the other types to be type \"Others\"\n\nSave the results as pd.DataFrame named `substitution_ratios`, its format should be like\n\n| Tumor_Sample_Barcode   |        A>C |       A>G |       A>T |       C>A |        C>G |      C>T |     CC>TT |   Others |\n|:-----------------------|-----------:|----------:|----------:|----------:|-----------:|---------:|----------:|---------:|\n| CSCC-1-T               | 0.0077821  | 0.0389105 | 0.0311284 | 0.167315  | 0.0311284  | 0.163424 | 0         | 0.560311 |\n| CSCC-10-T              | 0.00854473 | 0.0149533 | 0.0136182 | 0.0154873 | 0.00774366 | 0.401335 | 0.0259012 | 0.512417 |\n[... more rows]",
        "test_case": "assert abs(substitution_ratios['Others'].sum() - 19.924578840910613) < 1e-8\n\nassert abs(substitution_ratios['A>C'].sum() - 0.34981164110408886) < 1e-8\n\nassert abs(substitution_ratios['C>T'].sum() - 14.54864891595078) < 1e-8\n\nassert abs(substitution_ratios['C>G'].sum() - 0.7529763077579285) < 1e-8\n\nassert abs(substitution_ratios['C>A'].sum() - 1.1911024470062916) < 1e-8",
        "reference_answer": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the data\ndata_mutations = pd.read_csv('\/workdir\/data_mutations.csv')\n\n# Define a function to determine the type of substitution\ndef determine_substitution(ref, alt):\n    if ref == alt:\n        return None\n    substitution = f\"{ref}>{alt}\"\n    if substitution in [\"A>C\", \"A>G\", \"A>T\", \"C>A\", \"C>G\", \"C>T\", \"CC>TT\"]:\n        return substitution\n    return \"Others\"\n\n# Apply the function to determine the type of substitution for each mutation\ndata_mutations['Substitution1'] = data_mutations.apply(lambda row: determine_substitution(row['Reference_Allele'], row['Tumor_Seq_Allele1']), axis=1)\ndata_mutations['Substitution2'] = data_mutations.apply(lambda row: determine_substitution(row['Reference_Allele'], row['Tumor_Seq_Allele2']), axis=1)\ndata_mutations['Substitution'] = data_mutations['Substitution1'].combine(data_mutations['Substitution2'], lambda x,y: list(set([x,y])))\ndata_mutations = data_mutations[['Tumor_Sample_Barcode', 'Substitution']].explode('Substitution').dropna(subset=[\"Substitution\"])\n\n# Calculate the ratio of each type of substitution for each patient\nsubstitution_ratios = data_mutations.groupby(['Tumor_Sample_Barcode', 'Substitution']).size().unstack(fill_value=0)\nsubstitution_ratios = substitution_ratios.div(substitution_ratios.sum(axis=1), axis=0)\n\n# Plot the ratio of each type of substitution for each patient\nsubstitution_ratios.plot(kind='bar', stacked=True, figsize=(12, 8))\nplt.title('Ratio of Each Type of Gene Substitution Mutation for Each Patient')\nplt.ylabel('Ratio')\nplt.xlabel('Patient')\nplt.legend(title='Substitution', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"substitution_ratios.png\")\nplt.show()"
      },
      {
        "question": "For the significant genes, get the number of their total mutations per patient. Save the output as \"mutation_per_patient\", with the columns\n- PATIENT_ID\n- Count",
        "test_case": "assert mutation_per_patient[\"Count\"].sum() == 1265\nassert mutation_per_patient.shape == (130, 2)",
        "reference_answer": "\nimport pandas as pd\n\n# Load the data\ndata_clinical_sample = pd.read_csv(\"\/workdir\/data_clinical_sample.csv\")\ndata_mutations = pd.read_csv(\"\/workdir\/data_mutations.csv\")\n\n# Filter mutations for significant genes\nsignificant_mutations = data_mutations[data_mutations['Hugo_Symbol'].isin(significant_genes)]\n\n# Count the number of mutations per patient\nsignificant_mutations = significant_mutations.rename(columns={\"Tumor_Sample_Barcode\":\"SAMPLE_ID\"}).merge(data_clinical_sample[[\"PATIENT_ID\",\"SAMPLE_ID\"]].drop_duplicates(), on=\"SAMPLE_ID\").reset_index(drop=True)\n\nmutation_per_patient = significant_mutations.groupby('PATIENT_ID').size().reset_index(name='Count')\n\n# Rename columns to match the required output\nmutation_per_patient.columns = ['PATIENT_ID', 'Count']\n\n# Save the output\nmutation_per_patient.to_csv(\"mutation_per_patient.csv\", index=False)\n\n# Display the result\nprint(mutation_per_patient.head())"
      },
      {
        "question": "get the median overall survival and its 95% confidence interval. Save the output as `os`, `ci_high`, and `ci_low`.",
        "test_case": "assert abs(os - 27.17) < 1e-8\nassert abs(ci_low - 18.85) < 1e-8",
        "reference_answer": "import os\nimport pandas as pd\nfrom lifelines import KaplanMeierFitter\nimport matplotlib.pyplot as plt\n\n# Load the data\ndata_clinical_patient = pd.read_csv(\"\/workdir\/data_clinical_patient.csv\")\n\n# Prepare the data for Kaplan-Meier fitting\ndata = data_clinical_patient[[\"OS_MONTHS\", \"OS_STATUS\"]].dropna()\ndata[\"OS_STATUS\"] = data[\"OS_STATUS\"].apply(lambda x: 1 if x == \"1:DECEASED\" else 0)\n\n# Fit the Kaplan-Meier estimator\nkmf = KaplanMeierFitter()\nkmf.fit(durations=data[\"OS_MONTHS\"], event_observed=data[\"OS_STATUS\"])\n\n# Plot the survival function\nax = plt.subplot(111)\nkmf.plot_survival_function(ax=ax)\nplt.title(\"Overall Survival Curve\")\nplt.xlabel(\"Time (Months)\")\nplt.ylabel(\"Survival Probability\")\n\n# Save the plot\nplt.savefig(\"overall_survival_curve.png\")\nplt.show()\n\n# Get the median survival time and its confidence interval\nmedian_surv = kmf.median_survival_time_\nci = median_survival_times(kmf.confidence_interval_)\nci_low = ci.iloc[0, 0]\nci_high = ci.iloc[0, 1]\n\n# Save the results\nos = median_surv\n\n# Print the results\nprint(f\"Median Overall Survival: {os} months\")\nprint(f\"95% Confidence Interval: ({ci_low}, {ci_high})\")"
      },
      {
        "question": "Based on `patient_cna_status`, I want to show the oncoprint for the gene CNA across patients. You need to first transform `patient_cna_status` to have columns for PATIENT_ID, Gene, and CNA. Then, plot the oncoprint for amplification, deletion, and neutral.",
        "test_case": "import PyComplexHeatmap\nassert isinstance(fig, PyComplexHeatmap.oncoPrint.oncoPrintPlotter)\nassert len(fig.values) == 3",
        "reference_answer": "# Merge the dataframes\nimport pandas as pd\nimport PyComplexHeatmap\n# necessary to make oncoprint plots using complex heatmap\nfrom PyComplexHeatmap import (\nHeatmapAnnotation, \noncoPrintPlotter, \nanno_barplot\n)\n\ncna_status_df = patient_cna_status.melt(id_vars=[\"PATIENT_ID\"], var_name=\"Gene\", value_name=\"CNA\")\n\n# Create columns for Amplification, Neutral, and Deletion\ncna_status_df[\"amp\"] = (cna_status_df[\"CNA\"] == \"Amplification\").astype(int)\ncna_status_df[\"neut\"] = (cna_status_df[\"CNA\"] == \"Neutral\").astype(int)\ncna_status_df[\"del\"] = (cna_status_df[\"CNA\"] == \"Deletion\").astype(int)\n\n# Drop the original CNA column\ncna_status_df = cna_status_df.drop(columns=[\"CNA\"])\n\n# Rename columns to match the desired format\ncna_status_df = cna_status_df.rename(columns={\"PATIENT_ID\": \"sample\", \"Gene\": \"gene\"})\n\ncna_status_df = cna_status_df.drop_duplicates(subset=[\"sample\",\"gene\"]).reset_index(drop=True)\n\n# Pivot the dataframe for the oncoprint\nfig=oncoPrintPlotter(data=cna_status_df, y='gene',x='sample',\n                   values=['amp', 'neut', 'del'], subplot_gap=3, label=\"Alteration\",\n                    colors=['red', 'white', 'green'],\n                   show_rownames=True, show_colnames=True)"
      },
      {
        "question": "Make the curves showing the fraction of patients free from progression over the time with the months since the start of treatment. Save the output curve as `kmf`.",
        "test_case": "assert kmf.event_observed.sum() == 1\nassert abs(kmf.durations.sum()-232.94) < 1e-8",
        "reference_answer": "\nimport pandas as pd\nfrom lifelines import KaplanMeierFitter\nimport matplotlib.pyplot as plt\n\n# Load the data\ndata_clinical_patient = pd.read_csv(\"\/workdir\/data_clinical_patient.csv\")\n\n# Prepare the data for Kaplan-Meier fitting\nkmf = KaplanMeierFitter()\ndata = data_clinical_patient[[\"PFS_MONTHS\", \"PFS_STATUS\"]].dropna()\ndata[\"PFS_STATUS\"] = data[\"PFS_STATUS\"].apply(lambda x: 1 if x == \"1:Progressed\" else 0)\n\n# Fit the Kaplan-Meier estimator\nkmf.fit(data[\"PFS_MONTHS\"], event_observed=data[\"PFS_STATUS\"])\n\n# Plot the survival function\nax = plt.subplot(111)\nkmf.plot_survival_function(ax=ax)\nplt.title(\"Kaplan-Meier Curve for Progression-Free Survival\")\nplt.xlabel(\"Months since start of treatment\")\nplt.ylabel(\"Fraction of patients free from progression\")\n\n# Save the plot\nplt.savefig(\"kmf.png\")\nplt.show()\n"
      },
      {
        "question": "get me the median age of the all patients and the age range. Save your outputs as `median_age`, `max_age` and `min_age`.",
        "test_case": "assert median_age == 54.5\n\nassert max_age == 81\n\nassert min_age == 24",
        "reference_answer": "import pandas as pd\nimport os\n\n# Load the data\ndata_clinical_patient_path = \"\/workdir\/data_clinical_patient.csv\"\ndata_clinical_patient = pd.read_csv(data_clinical_patient_path)\n\n# Calculate the median age, max age, and min age\nmedian_age = data_clinical_patient['AGE'].median()\nmax_age = data_clinical_patient['AGE'].max()\nmin_age = data_clinical_patient['AGE'].min()"
      }
    ],
    "signature_instructions": "Generate a question based on the reference answer and the unit test cases.\n    ",
    "signature_prefix": "Question:"
  }
}